<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BlockChain Supply Chain Tracker</title>
    <script src="https://unpkg.com/@randlabs/myalgo-connect"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body
         {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 30px;
            color: white;
        }

        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .header p {
            font-size: 1.2em;
            opacity: 0.9;
        }

        .nav-tabs {
            display: flex;
            justify-content: center;
            margin-bottom: 30px;
            background: rgba(255,255,255,0.1);
            border-radius: 50px;
            padding: 5px;
            backdrop-filter: blur(10px);
        }

        .nav-tab {
            padding: 12px 24px;
            background: none;
            border: none;
            color: white;
            font-size: 16px;
            cursor: pointer;
            border-radius: 25px;
            transition: all 0.3s ease;
            margin: 0 5px;
        }

        .nav-tab.active {
            background: white;
            color: #667eea;
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }

        .tab-content {
            display: none;
            background: white;
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            backdrop-filter: blur(10px);
        }

        .tab-content.active {
            display: block;
            animation: fadeIn 0.5s ease-in;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #555;
        }

        .form-group input, .form-group select, .form-group textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid #e0e0e0;
            border-radius: 10px;
            font-size: 16px;
            transition: all 0.3s ease;
        }

        .form-group input:focus, .form-group select:focus, .form-group textarea:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .btn {
            padding: 12px 30px;
            border: none;
            border-radius: 25px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .btn-primary {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background: #5a6268;
            transform: translateY(-2px);
        }

        .product-card {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            border-left: 5px solid #667eea;
            transition: all 0.3s ease;
        }

        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
        }

        .timeline {
            position: relative;
            padding: 20px 0;
        }

        .timeline::before {
            content: '';
            position: absolute;
            left: 30px;
            top: 0;
            bottom: 0;
            width: 2px;
            background: linear-gradient(to bottom, #667eea, #764ba2);
        }

        .timeline-item {
            position: relative;
            padding-left: 80px;
            margin-bottom: 30px;
        }

        .timeline-item::before {
            content: '';
            position: absolute;
            left: 24px;
            top: 10px;
            width: 12px;
            height: 12px;
            background: #667eea;
            border-radius: 50%;
            border: 3px solid white;
            box-shadow: 0 0 0 3px #667eea;
        }

        .timeline-content {
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .qr-code {
            width: 200px;
            height: 200px;
            border: 2px solid #667eea;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 20px auto;
            background: white;
            font-size: 12px;
            text-align: center;
            color: #667eea;
        }

        .status-badge {
            padding: 5px 15px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .status-manufacturing { background: #ffeaa7; color: #e17055; }
        .status-packaging { background: #74b9ff; color: white; }
        .status-shipping { background: #fdcb6e; color: #e84393; }
        .status-delivered { background: #00b894; color: white; }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 20px;
            border-radius: 15px;
            text-align: center;
        }

        .stat-card h3 {
            font-size: 2em;
            margin-bottom: 10px;
        }

        .scanner-container {
            text-align: center;
            padding: 40px;
            background: #f8f9fa;
            border-radius: 15px;
            margin-bottom: 20px;
        }

        .scanner-input {
            width: 300px;
            padding: 15px;
            border: 2px dashed #667eea;
            border-radius: 10px;
            text-align: center;
            font-size: 16px;
            background: white;
        }

        .alert {
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            border-left: 5px solid;
        }

        .alert-success {
            background: #d4edda;
            border-color: #00b894;
            color: #155724;
        }

        .alert-error {
            background: #f8d7da;
            border-color: #dc3545;
            color: #721c24;
        }

        .blockchain-hash {
            font-family: 'Courier New', monospace;
            background: #f8f9fa;
            padding: 10px;
            border-radius: 5px;
            word-break: break-all;
            font-size: 12px;
            color: #667eea;
            border: 1px solid #e9ecef;
        }

        .two-column {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
        }

        @media (max-width: 768px) {
            .two-column {
                grid-template-columns: 1fr;
            }
            .nav-tabs {
                flex-direction: column;
                border-radius: 15px;
            }
            .nav-tab {
                margin: 5px 0;
            }
        }
    </style>
</head>
<body>
    <body>

<!-- üîê LOGIN SECTION -->
<div id="login-section" style="padding: 20px; background: white; margin: 20px; border-radius: 8px;">
  <h2>Select Role</h2>

  <!-- Admin Login -->
  <div id="admin-login" style="margin-bottom: 15px;">
    <h3>Admin Login</h3>
    <input type="text" id="admin-username" placeholder="Username">
    <input type="password" id="admin-password" placeholder="Password">
    <button onclick="adminLogin()">Login</button>
  </div>

  <!-- Vendor Wallet Login -->
  <div id="vendor-login" style="margin-bottom: 15px;">
    <h3>Vendor Login</h3>
    <button onclick="vendorLogin()">Login with MyAlgo Wallet</button>
  </div>

  <!-- Consumer View -->
  <div id="consumer-login">
    <h3>Consumer View</h3>
    <button onclick="enterAsConsumer()">Continue as Consumer</button>
  </div>
</div>
<!-- üîê END LOGIN SECTION -->

    <div class="container">
        <div class="header">
            <h1>üîó BlockChain Supply Chain</h1>
            <p>Transparent, Immutable, Trustworthy Product Tracking</p>
        </div>

        <div class="nav-tabs">
            <button class="nav-tab active" onclick="switchTab('consumer')">üîç Consumer Scanner</button>
            <button class="nav-tab" onclick="switchTab('admin')">‚öôÔ∏è Admin Dashboard</button>
            <button class="nav-tab" onclick="switchTab('vendor')">üì¶ Vendor Portal</button>
            <button class="nav-tab" onclick="switchTab('analytics')">üìä Analytics</button>
        </div>

       <!-- üëÅÔ∏è‚Äçüó®Ô∏è CONSUMER SECTION -->
<div id="consumer-section" style="display: none;">
    <!-- Consumer Scanner Tab -->
    <div id="consumer" class="tab-content active">
        <div class="scanner-container">
            <h2>üîç Scan Product QR Code</h2>
            <p>Enter the product ID from your QR code to view its complete journey</p>
            <br>
            <input type="text" id="scanInput" class="scanner-input" placeholder="Enter Product ID (e.g., PROD-2024-001)" 
                   onkeypress="handleScanEnter(event)">
            <br><br>
            <button class="btn btn-primary" onclick="scanProduct()">Scan Product</button>
        </div>
        <div id="scanResult"></div>
    </div>
</div>

<!-- üõ†Ô∏è ADMIN SECTION -->
<div id="admin-section" style="display: none;">
    <!-- Admin Dashboard Tab -->
    <div id="admin" class="tab-content">
        <div class="stats-grid">
            <div class="stat-card">
                <h3 id="totalProducts">0</h3>
                <p>Total Products Tracked</p>
            </div>
            <div class="stat-card">
                <h3 id="activeShipments">0</h3>
                <p>Active Shipments</p>
            </div>
            <div class="stat-card">
                <h3 id="completedDeliveries">0</h3>
                <p>Completed Deliveries</p>
            </div>
            <div class="stat-card">
                <h3 id="blockchainRecords">0</h3>
                <p>Blockchain Records</p>
            </div>
        </div>

        <div class="two-column">
            <div>
                <h3>üìã All Products</h3>
                <div id="productList"></div>
            </div>
            <div>
                <h3>üÜï Register New Product</h3>
                <form id="productForm">
                    <div class="form-group">
                        <label for="productName">Product Name</label>
                        <input type="text" id="productName" required>
                    </div>
                    <div class="form-group">
                        <label for="productCategory">Category</label>
                        <select id="productCategory" required>
                            <option value="">Select Category</option>
                            <option value="electronics">Electronics</option>
                            <option value="clothing">Clothing</option>
                            <option value="food">Food & Beverages</option>
                            <option value="pharmaceutical">Pharmaceutical</option>
                            <option value="automotive">Automotive</option>
                            <option value="other">Other</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="manufacturer">Manufacturer</label>
                        <input type="text" id="manufacturer" required>
                    </div>
                    <div class="form-group">
                        <label for="batchNumber">Batch Number</label>
                        <input type="text" id="batchNumber" required>
                    </div>
                    <div class="form-group">
                        <label for="expiryDate">Expiry Date (if applicable)</label>
                        <input type="date" id="expiryDate">
                    </div>
                    <button type="submit" class="btn btn-primary">Register Product</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- üöö VENDOR SECTION -->
<div id="vendor-section" style="display: none;">
    <!-- Vendor Portal Tab -->
    <div id="vendor" class="tab-content">
        <h3>üì¶ Update Product Status</h3>
        <form id="statusForm">
            <div class="form-group">
                <label for="productId">Product ID</label>
                <input type="text" id="productId" placeholder="PROD-2024-001" required>
            </div>
            <div class="form-group">
                <label for="newStatus">New Status</label>
                <select id="newStatus" required>
                    <option value="">Select Status</option>
                    <option value="manufacturing">Manufacturing</option>
                    <option value="packaging">Packaging</option>
                    <option value="shipping">Shipping</option>
                    <option value="delivered">Delivered</option>
                </select>
            </div>
            <div class="form-group">
                <label for="location">Location</label>
                <input type="text" id="location" placeholder="City, Country" required>
            </div>
            <div class="form-group">
                <label for="handler">Handler/Company</label>
                <input type="text" id="handler" placeholder="Company Name" required>
            </div>
            <div class="form-group">
                <label for="notes">Notes</label>
                <textarea id="notes" rows="3" placeholder="Additional details..."></textarea>
            </div>
            <button type="submit" class="btn btn-primary">Update Status</button>
        </form>
        <div id="statusUpdateResult"></div>
    </div>
</div>

<!-- üìä ANALYTICS (Visible to All) -->
<div id="analytics" class="tab-content">
    <h3>üìä Supply Chain Analytics</h3>
    <div class="stats-grid">
        <div class="stat-card">
            <h3 id="avgDeliveryTime">0</h3>
            <p>Avg. Delivery Time (Days)</p>
        </div>
        <div class="stat-card">
            <h3 id="onTimeDelivery">0%</h3>
            <p>On-Time Delivery Rate</p>
        </div>
        <div class="stat-card">
            <h3 id="mostActiveVendor">-</h3>
            <p>Most Active Vendor</p>
        </div>
        <div class="stat-card">
            <h3 id="totalTransactions">0</h3>
            <p>Total Blockchain Transactions</p>
        </div>
    </div>
    <div class="two-column">
        <div>
            <h4>üìà Recent Blockchain Transactions</h4>
            <div id="recentTransactions"></div>
        </div>
        <div>
            <!-- Future analytics goes here -->
        </div>
    </div>
</div>
            <div class="two-column">
                <div>
                    <h4>üìà Recent Blockchain Transactions</h4>
                    <div id="recentTransactions"></div>
                </div>
                <div>
                    
                </div>
            </div>
        </div>
    </div>

    <script>
        // Simulated blockchain and product data
        let blockchainData = {
            products: {},
            transactions: [],
            blocks: []
        };

        // Initialize with sample data
        initializeData();

        function initializeData() {
            // Sample products
            const sampleProducts = [
                {
                    id: 'PROD-2024-001',
                    name: 'Premium Wireless Headphones',
                    category: 'electronics',
                    manufacturer: 'AudioTech Inc.',
                    batchNumber: 'AT-2024-001',
                    created: new Date('2024-01-15'),
                    expiryDate: null,
                    status: 'delivered',
                    history: [
                        {
                            status: 'manufacturing',
                            timestamp: new Date('2024-01-15'),
                            location: 'Shenzhen, China',
                            handler: 'AudioTech Manufacturing',
                            notes: 'Product manufactured and quality tested',
                            blockHash: '0x1a2b3c4d5e6f7890abcdef1234567890abcdef12'
                        },
                        {
                            status: 'packaging',
                            timestamp: new Date('2024-01-17'),
                            location: 'Shenzhen, China',
                            handler: 'AudioTech Packaging',
                            notes: 'Packaged with premium materials',
                            blockHash: '0x2b3c4d5e6f7890abcdef1234567890abcdef1234'
                        },
                        {
                            status: 'shipping',
                            timestamp: new Date('2024-01-20'),
                            location: 'Hong Kong',
                            handler: 'Global Shipping Solutions',
                            notes: 'Shipped via air freight',
                            blockHash: '0x3c4d5e6f7890abcdef1234567890abcdef123456'
                        },
                        {
                            status: 'delivered',
                            timestamp: new Date('2024-01-25'),
                            location: 'Mumbai, India',
                            handler: 'Local Delivery Service',
                            notes: 'Successfully delivered to customer',
                            blockHash: '0x4d5e6f7890abcdef1234567890abcdef12345678'
                        }
                    ]
                },
                {
                    id: 'PROD-2024-002',
                    name: 'Organic Green Tea',
                    category: 'food',
                    manufacturer: 'TeaLeaf Organics',
                    batchNumber: 'TL-2024-002',
                    created: new Date('2024-02-01'),
                    expiryDate: new Date('2026-02-01'),
                    status: 'shipping',
                    history: [
                        {
                            status: 'manufacturing',
                            timestamp: new Date('2024-02-01'),
                            location: 'Darjeeling, India',
                            handler: 'TeaLeaf Processing Plant',
                            notes: 'Organic tea leaves processed and packaged',
                            blockHash: '0x5e6f7890abcdef1234567890abcdef123456789a'
                        },
                        {
                            status: 'packaging',
                            timestamp: new Date('2024-02-03'),
                            location: 'Darjeeling, India',
                            handler: 'TeaLeaf Packaging',
                            notes: 'Sealed in biodegradable packaging',
                            blockHash: '0x6f7890abcdef1234567890abcdef123456789ab'
                        },
                        {
                            status: 'shipping',
                            timestamp: new Date('2024-02-05'),
                            location: 'Kolkata, India',
                            handler: 'Express Logistics',
                            notes: 'In transit to distribution center',
                            blockHash: '0x7890abcdef1234567890abcdef123456789abc'
                        }
                    ]
                }
            ];

            // Initialize blockchain data
            sampleProducts.forEach(product => {
                blockchainData.products[product.id] = product;
                product.history.forEach(record => {
                    blockchainData.transactions.push({
                        id: `tx-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
                        productId: product.id,
                        timestamp: record.timestamp,
                        action: record.status,
                        blockHash: record.blockHash
                    });
                });
            });

            updateStats();
        }

        function switchTab(tabName) {
            // Hide all tabs
            const tabs = document.querySelectorAll('.tab-content');
            tabs.forEach(tab => tab.classList.remove('active'));

            // Remove active class from all nav tabs
            const navTabs = document.querySelectorAll('.nav-tab');
            navTabs.forEach(tab => tab.classList.remove('active'));

            // Show selected tab
            document.getElementById(tabName).classList.add('active');
            event.target.classList.add('active');

            // Update content based on tab
            if (tabName === 'admin') {
                loadProductList();
            } else if (tabName === 'analytics') {
                loadAnalytics();
            }
        }

        function handleScanEnter(event) {
            if (event.key === 'Enter') {
                scanProduct();
            }
        }

        function scanProduct() {
            const productId = document.getElementById('scanInput').value.trim();
            const resultDiv = document.getElementById('scanResult');

            if (!productId) {
                resultDiv.innerHTML = '<div class="alert alert-error">Please enter a product ID</div>';
                return;
            }

            const product = blockchainData.products[productId];
            if (!product) {
                resultDiv.innerHTML = '<div class="alert alert-error">Product not found. Please check the ID and try again.</div>';
                return;
            }

            // Generate QR code representation
            const qrCode = generateQRCode(productId);

            // Create product timeline
            const timeline = product.history.map(record => `
                <div class="timeline-item">
                    <div class="timeline-content">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px;">
                            <span class="status-badge status-${record.status}">${record.status}</span>
                            <small>${record.timestamp.toLocaleString()}</small>
                        </div>
                        <h4>${record.handler}</h4>
                        <p><strong>Location:</strong> ${record.location}</p>
                        <p><strong>Notes:</strong> ${record.notes}</p>
                        <div class="blockchain-hash">
                            <strong>Blockchain Hash:</strong> ${record.blockHash}
                        </div>
                    </div>
                </div>
            `).join('');

            resultDiv.innerHTML = `
                <div class="alert alert-success">‚úÖ Product found and verified on blockchain!</div>
                <div class="product-card">
                    <div class="two-column">
                        <div>
                            <h2>${product.name}</h2>
                            <p><strong>Product ID:</strong> ${product.id}</p>
                            <p><strong>Category:</strong> ${product.category}</p>
                            <p><strong>Manufacturer:</strong> ${product.manufacturer}</p>
                            <p><strong>Batch Number:</strong> ${product.batchNumber}</p>
                            <p><strong>Manufacturing Date:</strong> ${product.created.toLocaleDateString()}</p>
                            ${product.expiryDate ? `<p><strong>Expiry Date:</strong> ${product.expiryDate.toLocaleDateString()}</p>` : ''}
                            <p><strong>Current Status:</strong> <span class="status-badge status-${product.status}">${product.status}</span></p>
                        </div>
                        <div>
                            <div class="qr-code">
                                ${qrCode}
                            </div>
                            <p style="text-align: center; margin-top: 10px;">
                                <strong>Blockchain Verified ‚úì</strong><br>
                                <small>${product.history.length} recorded transactions</small>
                            </p>
                        </div>
                    </div>
                </div>
                <div class="product-card">
                    <h3>üìã Product Journey Timeline</h3>
                    <div class="timeline">
                        ${timeline}
                    </div>
                </div>
            `;
        }

        function generateQRCode(productId) {
            // Simple QR code representation
            const qrPattern = [
                '‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà',
                '‚ñà       ‚ñà   ‚ñà',
                '‚ñà   ‚ñà   ‚ñà   ‚ñà',
                '‚ñà   ‚ñà   ‚ñà   ‚ñà',
                '‚ñà       ‚ñà   ‚ñà',
                '‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà',
                '',
                `${productId}`,
                'Scan to verify'
            ];
            return qrPattern.join('<br>');
        }

        function registerProduct(event) {
            event.preventDefault();
            
            const productId = `PROD-${new Date().getFullYear()}-${String(Object.keys(blockchainData.products).length + 1).padStart(3, '0')}`;
            const productData = {
                id: productId,
                name: document.getElementById('productName').value,
                category: document.getElementById('productCategory').value,
                manufacturer: document.getElementById('manufacturer').value,
                batchNumber: document.getElementById('batchNumber').value,
                created: new Date(),
                expiryDate: document.getElementById('expiryDate').value ? new Date(document.getElementById('expiryDate').value) : null,
                status: 'manufacturing',
                history: [{
                    status: 'manufacturing',
                    timestamp: new Date(),
                    location: 'Manufacturing Plant',
                    handler: document.getElementById('manufacturer').value,
                    notes: 'Product registered and manufacturing started',
                    blockHash: generateBlockHash()
                }]
            };

            blockchainData.products[productId] = productData;
            blockchainData.transactions.push({
                id: `tx-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
                productId: productId,
                timestamp: new Date(),
                action: 'manufacturing',
                blockHash: productData.history[0].blockHash
            });

            document.getElementById('productForm').reset();
            updateStats();
            loadProductList();
            
            alert(`Product registered successfully!\nProduct ID: ${productId}\nQR Code generated for tracking.`);
        }

        function updateProductStatus(event) {
            event.preventDefault();
            
            const productId = document.getElementById('productId').value;
            const newStatus = document.getElementById('newStatus').value;
            const location = document.getElementById('location').value;
            const handler = document.getElementById('handler').value;
            const notes = document.getElementById('notes').value;

            const product = blockchainData.products[productId];
            if (!product) {
                document.getElementById('statusUpdateResult').innerHTML = 
                    '<div class="alert alert-error">Product not found!</div>';
                return;
            }

            const statusUpdate = {
                status: newStatus,
                timestamp: new Date(),
                location: location,
                handler: handler,
                notes: notes || `Status updated to ${newStatus}`,
                blockHash: generateBlockHash()
            };

            product.history.push(statusUpdate);
            product.status = newStatus;

            blockchainData.transactions.push({
                id: `tx-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
                productId: productId,
                timestamp: new Date(),
                action: newStatus,
                blockHash: statusUpdate.blockHash
            });

            document.getElementById('statusForm').reset();
            updateStats();
            
            document.getElementById('statusUpdateResult').innerHTML = 
                `<div class="alert alert-success">
                    ‚úÖ Status updated successfully!<br>
                    <strong>Product:</strong> ${product.name}<br>
                    <strong>New Status:</strong> ${newStatus}<br>
                    <strong>Blockchain Hash:</strong> ${statusUpdate.blockHash}
                </div>`;
        }

        function generateBlockHash() {
            return '0x' + Array.from({length: 40}, () => Math.floor(Math.random() * 16).toString(16)).join('');
        }

        function loadProductList() {
            const productList = document.getElementById('productList');
            const products = Object.values(blockchainData.products);
            
            if (products.length === 0) {
                productList.innerHTML = '<p>No products registered yet.</p>';
                return;
            }

            productList.innerHTML = products.map(product => `
                <div class="product-card">
                    <h4>${product.name}</h4>
                    <p><strong>ID:</strong> ${product.id}</p>
                    <p><strong>Status:</strong> <span class="status-badge status-${product.status}">${product.status}</span></p>
                    <p><strong>Manufacturer:</strong> ${product.manufacturer}</p>
                    <p><strong>Created:</strong> ${product.created.toLocaleDateString()}</p>
                    <p><strong>Blockchain Records:</strong> ${product.history.length}</p>
                </div>
            `).join('');
        }

        function loadAnalytics() {
            const products = Object.values(blockchainData.products);
            const delivered = products.filter(p => p.status === 'delivered');
            
            // Calculate average delivery time
            const avgDeliveryTime = delivered.length > 0 ? 
                delivered.reduce((sum, p) => {
                    const start = p.created;
                    const end = p.history[p.history.length - 1].timestamp;
                    return sum + (end - start) / (1000 * 60 * 60 * 24);
                }, 0) / delivered.length : 0;

            document.getElementById('avgDeliveryTime').textContent = Math.round(avgDeliveryTime);
            document.getElementById('onTimeDelivery').textContent = '95%';
            document.getElementById('mostActiveVendor').textContent = 'Global Shipping Solutions';
            document.getElementById('totalTransactions').textContent = blockchainData.transactions.length;

            // Load recent transactions
            const recentTransactions = blockchainData.transactions
                .sort((a, b) => b.timestamp - a.timestamp)
                .slice(0, 5);

            document.getElementById('recentTransactions').innerHTML = recentTransactions.map(tx => `
                <div class="product-card">
                    <p><strong>Product:</strong> ${tx.productId}</p>
                    <p><strong>Action:</strong> <span class="status-badge status-${tx.action}">${tx.action}</span></p>
                    <p><strong>Timestamp:</strong> ${tx.timestamp.toLocaleString()}</p>
                    <div class="blockchain-hash">
                        <strong>Hash:</strong> ${tx.blockHash}
                    </div>
                </div>
            `).join('');

            document.getElementById('topRoutes').innerHTML = routes.map(route => `
                <div class="product-card">
                    <h4>${route.route}</h4>
                    <p><strong>Deliveries:</strong> ${route.deliveries}</p>
                    <p><strong>Avg. Time:</strong> ${route.avgTime}</p>
                </div>
            `).join('');
        }

        function updateStats() {
            const products = Object.values(blockchainData.products);
            const activeShipments = products.filter(p => p.status === 'shipping').length;
            const completedDeliveries = products.filter(p => p.status === 'delivered').length;

            document.getElementById('totalProducts').textContent = products.length;
            document.getElementById('activeShipments').textContent = activeShipments;
            document.getElementById('completedDeliveries').textContent = completedDeliveries;
            document.getElementById('blockchainRecords').textContent = blockchainData.transactions.length;
        }

        // Event listeners
        document.getElementById('productForm').addEventListener('submit', registerProduct);
        document.getElementById('statusForm').addEventListener('submit', updateProductStatus);

        // Advanced Features

        // Simulate blockchain network status
        function simulateBlockchainStatus() {
            const statusIndicator = document.createElement('div');
            statusIndicator.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: #00b894;
                color: white;
                padding: 10px 20px;
                border-radius: 25px;
                font-size: 12px;
                z-index: 1000;
                box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            `;
        }

        // Add data export functionality
        function exportData() {
            const data = {
                products: blockchainData.products,
                transactions: blockchainData.transactions,
                exportDate: new Date().toISOString(),
                totalRecords: blockchainData.transactions.length
            };

            const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `blockchain_supply_chain_${new Date().toISOString().split('T')[0]}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }

        // Add search functionality
        function searchProducts(query) {
            const products = Object.values(blockchainData.products);
            return products.filter(product => 
                product.name.toLowerCase().includes(query.toLowerCase()) ||
                product.id.toLowerCase().includes(query.toLowerCase()) ||
                product.manufacturer.toLowerCase().includes(query.toLowerCase())
            );
        }

        // Add batch operations
        function batchUpdateStatus(productIds, newStatus, location, handler, notes) {
            const results = [];
            productIds.forEach(productId => {
                const product = blockchainData.products[productId];
                if (product) {
                    const statusUpdate = {
                        status: newStatus,
                        timestamp: new Date(),
                        location: location,
                        handler: handler,
                        notes: notes || `Batch update to ${newStatus}`,
                        blockHash: generateBlockHash()
                    };

                    product.history.push(statusUpdate);
                    product.status = newStatus;

                    blockchainData.transactions.push({
                        id: `tx-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
                        productId: productId,
                        timestamp: new Date(),
                        action: newStatus,
                        blockHash: statusUpdate.blockHash
                    });

                    results.push({ productId, success: true });
                } else {
                    results.push({ productId, success: false, error: 'Product not found' });
                }
            });
            return results;
        }

        // Add alerts for supply chain issues
        function checkSupplyChainAlerts() {
            const alerts = [];
            const products = Object.values(blockchainData.products);
            
            // Check for delayed shipments
            products.forEach(product => {
                if (product.status === 'shipping') {
                    const lastUpdate = product.history[product.history.length - 1];
                    const daysSinceUpdate = (new Date() - lastUpdate.timestamp) / (1000 * 60 * 60 * 24);
                    
                    if (daysSinceUpdate > 7) {
                        alerts.push({
                            type: 'warning',
                            message: `Product ${product.id} has been in shipping for ${Math.round(daysSinceUpdate)} days`,
                            productId: product.id
                        });
                    }
                }
                
                // Check for expired products
                if (product.expiryDate && product.expiryDate < new Date()) {
                    alerts.push({
                        type: 'error',
                        message: `Product ${product.id} has expired`,
                        productId: product.id
                    });
                }
            });

            return alerts;
        }

        // Add real-time notifications
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed;
                top: 80px;
                right: 20px;
                padding: 15px 20px;
                border-radius: 10px;
                color: white;
                font-weight: 600;
                z-index: 1000;
                transform: translateX(400px);
                transition: transform 0.3s ease;
                max-width: 300px;
                box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            `;

            const colors = {
                info: '#667eea',
                success: '#00b894',
                warning: '#fdcb6e',
                error: '#e74c3c'
            };

            notification.style.background = colors[type] || colors.info;
            notification.innerHTML = `
                <div style="display: flex; align-items: center; justify-content: space-between;">
                    <span>${message}</span>
                    <button onclick="this.parentElement.parentElement.remove()" 
                            style="background: none; border: none; color: white; font-size: 18px; cursor: pointer; margin-left: 10px;">√ó</button>
                </div>
            `;

            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.style.transform = 'translateX(0)';
            }, 100);

            setTimeout(() => {
                if (notification.parentElement) {
                    notification.style.transform = 'translateX(400px)';
                    setTimeout(() => {
                        if (notification.parentElement) {
                            notification.remove();
                        }
                    }, 300);
                }
            }, 5000);
        }

        // Add product verification
        function verifyProduct(productId) {
            const product = blockchainData.products[productId];
            if (!product) {
                return { valid: false, reason: 'Product not found' };
            }

            // Check if all blockchain hashes are valid
            const validHashes = product.history.every(record => 
                record.blockHash && record.blockHash.startsWith('0x') && record.blockHash.length === 42
            );

            if (!validHashes) {
                return { valid: false, reason: 'Invalid blockchain hash detected' };
            }

            // Check chronological order
            const chronological = product.history.every((record, index) => {
                if (index === 0) return true;
                return record.timestamp >= product.history[index - 1].timestamp;
            });

            if (!chronological) {
                return { valid: false, reason: 'Timeline inconsistency detected' };
            }

            return { valid: true, reason: 'Product verification successful' };
        }

        // Add analytics dashboard enhancements
        function generateAdvancedAnalytics() {
            const products = Object.values(blockchainData.products);
            const analytics = {
                totalProducts: products.length,
                statusDistribution: {},
                manufacturerStats: {},
                categoryStats: {},
                monthlyRegistrations: {},
                averageJourneyTime: 0,
                blockchainIntegrity: 100
            };

            // Calculate status distribution
            products.forEach(product => {
                analytics.statusDistribution[product.status] = 
                    (analytics.statusDistribution[product.status] || 0) + 1;
                
                analytics.manufacturerStats[product.manufacturer] = 
                    (analytics.manufacturerStats[product.manufacturer] || 0) + 1;
                
                analytics.categoryStats[product.category] = 
                    (analytics.categoryStats[product.category] || 0) + 1;
                
                const month = product.created.toISOString().slice(0, 7);
                analytics.monthlyRegistrations[month] = 
                    (analytics.monthlyRegistrations[month] || 0) + 1;
            });

            return analytics;
        }

        // Initialize blockchain status indicator
        simulateBlockchainStatus();

        // Show welcome notification
        setTimeout(() => {
            showNotification('Blockchain Supply Chain System Ready! üöÄ', 'success');
        }, 1000);

        // Simulate periodic blockchain updates
        setInterval(() => {
            const alerts = checkSupplyChainAlerts();
            if (alerts.length > 0) {
                alerts.forEach(alert => {
                    showNotification(alert.message, alert.type);
                });
            }
        }, 30000); // Check every 30 seconds

        // Add keyboard shortcuts
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey || e.metaKey) {
                switch(e.key) {
                    case 'e':
                        e.preventDefault();
                        exportData();
                        showNotification('Data exported successfully!', 'success');
                        break;
                    case 'f':
                        e.preventDefault();
                        document.getElementById('scanInput').focus();
                        break;
                }
            }
        });

        // Add auto-save functionality
        function autoSave() {
            const data = JSON.stringify(blockchainData);
            // In a real application, this would save to localStorage or send to server
            console.log('Auto-saved blockchain data:', data.length, 'characters');
        }

        setInterval(autoSave, 60000); // Auto-save every minute

        console.log('üîó Blockchain Supply Chain Management System Initialized');
        console.log('üìä Total Products:', Object.keys(blockchainData.products).length);
        console.log('üîç Total Transactions:', blockchainData.transactions.length);
        console.log('‚å®Ô∏è  Keyboard Shortcuts:');
        console.log('   Ctrl+E: Export data');
        console.log('   Ctrl+F: Focus search');

// üîê LOGIN FUNCTIONS

let currentUser = {
  role: null,
  walletAddress: null,
};

const myAlgoWallet = new MyAlgoConnect();

function adminLogin() {
  const username = document.getElementById("admin-username").value;
  const password = document.getElementById("admin-password").value;
  if (username === "admin" && password === "1234") {
    currentUser.role = "admin";
    alert("Admin logged in");
    document.getElementById("login-section").style.display = "none";
    showAdminPanel();
  } else {
    alert("Invalid admin credentials");
  }
}

function vendorLogin() {
  // Simulated login for demonstration purposes
  const mockWallet = "VENDOR-0x1234abcd";
  currentUser.role = "vendor";
  currentUser.walletAddress = mockWallet;
  alert("Vendor logged in (mock): " + mockWallet);
  document.getElementById("login-section").style.display = "none";
  showVendorPanel();
}

function enterAsConsumer() {
  currentUser.role = "consumer";
  alert("Consumer mode enabled");
  document.getElementById("login-section").style.display = "none";
  showConsumerPanel();
}

function showAdminPanel() {
  document.getElementById("admin-section").style.display = "block";
  document.getElementById("vendor-section").style.display = "none";
  document.getElementById("consumer-section").style.display = "none";
}

function showVendorPanel() {
  document.getElementById("admin-section").style.display = "none";
  document.getElementById("vendor-section").style.display = "block";
  document.getElementById("consumer-section").style.display = "none";
}

function showConsumerPanel() {
  document.getElementById("admin-section").style.display = "none";
  document.getElementById("vendor-section").style.display = "none";
  document.getElementById("consumer-section").style.display = "block";
}
</script>
</body>
</html>
